// Funkcja do generowania obrazk√≥w pogodowych na podstawie warunk√≥w
// Wej≈õcia: `condition` - warunek pogodowy jako string, `is_day` - czy jest dzie≈Ñ (bool)
// Wyj≈õcie: `Vec<String>` - wektor z liniami tekstu reprezentujƒÖcymi obrazek

pub fn match_image(condition: &str, is_day: bool) -> Vec<String> {
    match (condition.trim().to_lowercase().as_str(), is_day) {
        ("sunny", true) => vec![
            centered_line(r"\ | /", 13),
            centered_line("‚òº", 13),
            centered_line(r"/ | \\", 13),
        ],
        ("clear", false) => vec![
            centered_line("‚òæ", 13),
            centered_line("‚òæ‚òæ‚òæ", 13),
            centered_line("~~~", 13),
        ],
        ("partly cloudy", true) => vec![
            centered_line("‚òÅ‚òÄ‚òÅ", 13),
            centered_line("‚òÄ‚òÅ‚òÄ", 13),
            centered_line(r"\\‚òÅ‚òÄ/", 13),
        ],
        ("partly cloudy", false) => vec![
            centered_line("‚òÅ‚òæ‚òÅ", 13),
            centered_line("‚òæ‚òÅ‚òæ", 13),
            centered_line(r"/‚òæ‚òÅ\\", 13),
        ],
        ("cloudy", true) => vec![
            centered_line("‚òÅ‚òÅ‚òÅ", 13),
            centered_line("‚òÅ‚òÅ‚òÅ‚òÅ‚òÅ", 13),
            centered_line("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ", 13),
        ],
        ("cloudy", false) => vec![
            centered_line("‚òÅ‚òÅ‚òÅ", 13),
            centered_line("‚òÅ‚òÅ‚òÅ‚òÅ‚òÅ", 13),
            centered_line("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ", 13),
        ],
        ("overcast", true) => vec![
            centered_line("‚òÅ‚òÅ‚òÅ‚òÅ‚òÅ", 13),
            centered_line("‚òÅ‚òÅ‚òÅ‚òÅ‚òÅ", 13),
            centered_line("~~~~~", 13),
        ],    
        ("overcast", false) => vec![
            centered_line("‚òÅ‚òÅ‚òÅ‚òÅ‚òÅ", 13),
            centered_line("‚òÅ‚òÅ‚òÅ‚òÅ‚òÅ", 13),
            centered_line("~~~~~", 13),
        ],
        ("mist", true) => vec![
            centered_line("~~~~~", 13),
            centered_line("~~~~~~~~~", 13),
            centered_line("~~~~~", 13),
        ],    
        ("mist", false) => vec![
            centered_line("~~~~~", 13),
            centered_line("~~~~~~~~~", 13),
            centered_line(".....", 13),
        ],    
        ("patchy rain possible", true) => vec![
            centered_line("‚òÄ‚òÅüåß", 13),
            centered_line("üåßüåßüåß", 13),
            centered_line("~~~~~", 13),
        ],
        ("patchy rain possible", false) => vec![
            centered_line("‚òæ‚òÅüåß", 13),
            centered_line("üåßüåßüåß", 13),
            centered_line("~~~~~", 13),
        ],
        ("fog", true) => vec![
            centered_line("‚òÅ", 13),
            centered_line("~~~~~", 13),
            centered_line("~~~~~~~", 13),
        ],    
        ("fog", false) => vec![
            centered_line("‚òæ", 13),
            centered_line("~~~~~", 13),
            centered_line("~~~~~~~", 13),
        ],
        ("patchy light drizzle", true) => vec![
            centered_line("‚òÅìÑº‚òÅ", 13),
            centered_line("ìÑºìÑºìÑº", 13),
            centered_line(". .", 13),
        ],    
        ("patchy light drizzle", false) => vec![
            centered_line("‚òÅìÑº‚òÅ", 13),
            centered_line("ìÑºìÑºìÑº", 13),
            centered_line(". .", 13),
        ],
        ("light drizzle", true) => vec![
            centered_line("‚òÅìÑº‚òÅ", 13),
            centered_line("ìÑºìÑºìÑº", 13),
            centered_line("...", 13),
        ],    
        ("light drizzle", false) => vec![
            centered_line("‚òÅìÑº‚òÅ", 13),
            centered_line("ìÑºìÑºìÑº", 13),
            centered_line("...", 13),
        ],    
        ("patchy light rain", true) => vec![
            centered_line("‚òÄ‚òÅüå¶", 13),
            centered_line("üå¶ìÑºüå¶", 13),
            centered_line(". .", 13),
        ],    
        ("patchy light rain", false) => vec![
            centered_line("‚òæ‚òÅüå¶", 13),
            centered_line("üå¶ìÑºüå¶", 13),
            centered_line(". .", 13),
        ],
        ("light rain", true) => vec![
            centered_line("‚òÅüåßÔ∏é‚òÅ", 13),
            centered_line("üåßÔ∏éÔ∏é‚òÅÔ∏éüåß", 13),
            centered_line(". .", 13),
        ],    
        ("light rain", false) => vec![
            centered_line("‚òæüåßÔ∏é‚òÅ", 13),
            centered_line("üåßÔ∏éÔ∏é‚òÅÔ∏éüåß", 13),
            centered_line(". .", 13),
        ],
        ("moderate rain at times", true) => vec![
            centered_line("‚òÄ‚òÅüåß", 13),
            centered_line("üåßüåßüåß", 13),
            centered_line("~~~", 13),
        ],    
        ("moderate rain at times", false) => vec![
            centered_line("‚òæ‚òÅüåß", 13),
            centered_line("üåßüåßüåß", 13),
            centered_line("~~~", 13),
        ],
        ("moderate rain", true) => vec![
            centered_line("‚òÅüåß‚òÅ", 13),
            centered_line("üåßüåßüåß", 13),
            centered_line(":::", 13),
        ],    
        ("moderate rain", false) => vec![
            centered_line("‚òæüåßÔ∏é‚òÅ", 13),
            centered_line("üåßüåßÔ∏éüåß", 13),
            centered_line(":::", 13),
        ],
        ("heavy rain at times", true) => vec![
            centered_line("‚òÄ‚òÅ‚õà", 13),
            centered_line("‚õà‚õà‚õà", 13),
            centered_line("///", 13),
        ],    
        ("heavy rain at times", false) => vec![
            centered_line("‚òæ‚òÅ‚õà", 13),
            centered_line("‚õà‚õà‚õà", 13),
            centered_line("///", 13),
        ],
        ("heavy rain", true) => vec![
            centered_line("‚òÅ‚õà‚òÅ", 13),
            centered_line("‚õà‚õà‚õà", 13),
            centered_line("‚â°‚â°‚â°", 13),
        ],    
        ("heavy rain", false) => vec![
            centered_line("‚òæ‚õà‚òÅ", 13),
            centered_line("‚õà‚õà‚õà", 13),
            centered_line("‚â°‚â°‚â°", 13),
        ],
        ("light rain shower", true) => vec![
            centered_line("‚òÅìÑº‚òÅ", 13),
            centered_line("ìÑºüåßÔ∏éÔ∏éìÑº", 13),
            centered_line(".:.", 13),
        ],    
        ("light rain shower", false) => vec![
            centered_line("‚òæìÑº‚òÅ", 13),
            centered_line("ìÑºüåßÔ∏éìÑº", 13),
            centered_line(".:.", 13),
        ],
        ("patchy rain nearby", true) => vec![
            centered_line("‚òÄ‚òÅüåß", 13),
            centered_line("üåßìÑºüåß", 13),
            centered_line("~~~", 13),
        ],    
        ("patchy rain nearby", false) => vec![
            centered_line("‚òæ‚òÅüåß", 13),
            centered_line("üåßìÑºüåß", 13),
            centered_line("~~~", 13),
        ],
        _ => vec![
            "[no art]".to_string(),
            "<unknown condition>".to_string(),
            "¬Ø\\_(„ÉÑ)_/¬Ø".to_string(),
        ],
    }
}

fn centered_line(content: &str, width: usize) -> String {
    let pad = width.saturating_sub(content.chars().count());
    let left = pad / 2;
    let right = pad - left;
    format!("{}{}{}", " ".repeat(left), content, " ".repeat(right))
}